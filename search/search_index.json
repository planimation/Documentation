{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Planimation","text":"<p>Planimation is a modular and extensible open source framework to visualise sequential solutions of planning problems specified in PDDL. We introduce a preliminary  declarative PDDL-like animation profile specification, expressive enough to synthesise animations of arbitrary initial states and goals of a benchmark with just a single profile.</p>"},{"location":"#1-overview","title":"1 Overview","text":"<p>Planimation was developed as a final year project by students at the Univeristy of Melbourne. Here's a promotional video explaining the motivation behind planimation.</p> <p></p> <p>Planimation is an open-source program which visualises solutions to Planning Problems. It is an executable Unity architecture in a browser.</p> <p>Watch the video below for a 2 minutes introduction about Planimation.</p> <p></p> <p>For developer documentation, see</p> <ol> <li>Animation Profile Guide<ul> <li>Contains a guide to Animation Profiles and the Animation Profile Language</li> </ul> </li> <li>Backend Dev. Guide<ul> <li>Contains a guide to the Visualisation File Generator Component</li> </ul> </li> <li>Frontend Dev. Guide<ul> <li>Contains a guide to the VisualiserComponent </li> </ul> </li> </ol>"},{"location":"#11-planning-problems","title":"1.1 Planning Problems","text":"<p>For information about Planning Problems, see http://planning.domains/</p> <p>Our application uses one 'Animation Profile' per problem domain. An Animation Profile is a user-written PDDL file which tells the Visualiser how a Domain is to be visualised. See section 3.2 for more information on Animation Profiles.</p>"},{"location":"#12-scope","title":"1.2 Scope","text":"<p>Planimation currently has Animation Profiles for four classic planning domains: Blocks, Grid, Towers of Hanoi, and Logistics. We also include Animation profiles of other classic combinatorial problems based on Missionaries and Cannibals. </p> <p>Animation profiles for new domains may be added by writing an Animation Profile (See guide).</p> <p>Planimation can animate plans generated by the AI solver available on http://editor.planning.domains. Alternatively, the user can provide their own solution from any solver, provided it conforms to the correct format.</p>"},{"location":"#2-getting-started","title":"2 Getting Started","text":"<ol> <li> <p>Try planimation within the online PDDL editor. Comes preloaded with files to planimat Blocks. Planimation is installable from the plugin menu.</p> <p> 2. Alternatively, visit our stand alone application at http://planimation.planning.domains</p> </li> </ol>"},{"location":"#3-papers","title":"3 Papers","text":"<ul> <li> <p>ICAPS 2019 System Demonstrations</p> </li> <li> <p>KEPS book: Plannimg.domains</p> </li> </ul>"},{"location":"#5-awards","title":"5 Awards","text":""},{"location":"#51-icaps-2019-best-system-demonstration","title":"5.1 ICAPS 2019 Best System Demonstration","text":"<p>This document contains an overview of Planimation, recipient of the ICAPS 2019 Best system Demo Award.  </p>"},{"location":"#52-melbourne-school-of-engineering-endeavour-2018","title":"5.2 Melbourne School of Engineering - Endeavour 2018","text":"<p>Endeavour Exhibition discovers final-year industry, design and research projects developed by our engineering and IT masters students.</p> <p> </p>"},{"location":"#6-citing-planimation","title":"6 Citing Planimation","text":"<p>Please cite Planimation using</p> <pre><code>@article{chen2020planimation,\n  author       = {Chen, Gan and\n                  Ding, Yi and\n                  Edwards, Hugo and\n                  Chau, Chong Hin and\n                  Hou, Sai and\n                  Johnson, Grace and\n                  Sharukh Syed, Mohammed and\n                  Tang, Haoyuan and\n                  Wu, Yue and\n                  Yan, Ye and\n                  Tidhar Gil and\n                  Lipovetzky Nir},\n  title        = {Planimation},\n  journal      = {arXiv preprint arXiv:2008.04600},\n  year         = {2020}\n}\n</code></pre>"},{"location":"ap_guide/","title":"Animation Profile","text":"<p>An Animation Profile (AP) is a user-written PDDL file which tells the Visualiser how a Domain is to be visualised. Each Animation Profile corresponds to one Domain. </p> <p>Essentially, the AP provides a set of visual objects (\"visual\") within the domain, along with a set of mappings from Predicates to animation behaviours.</p>"},{"location":"ap_guide/#scope","title":"Scope","text":"<p>The AP Language is designed to be flexible enough to allow for the animation of many simple PDDL domains, such as those found at https://github.com/planimation/documentation/tree/master/AnimationProfiles </p> <p>Currently, APs have been written for four domains from this repository: Blocks, Towers of Hanoi, Logistics, and Grid.</p> <p>Other simple domains can be visualised in the language. For more complicated domains, additional functions or object properties may be added (See section 4).</p>"},{"location":"ap_guide/#2-using-the-language","title":"2 Using the Language","text":"<p>This section contains complete documentation for the syntax and semantics of the AP language. For a quick starting point to writing your own AP, see section 3.</p>"},{"location":"ap_guide/#21-key-components","title":"2.1 Key Components","text":""},{"location":"ap_guide/#predicates","title":"Predicates","text":"<p>The first content of the AP should be the Predicate blocks. Here is an example of a Predicate block.</p> <pre><code>(:predicate holding\n\n                 :parameters (?x claw)\n                 :effect (\n                 (equal (?x x y) (claw x y))\n                 )\n\n  )\n</code></pre> <p>There should be one or zero Predicate blocks for each Predicate in the Domain. If there is no Predicate block for a Predicate in the domain, the Predicate is ignored by the solver.</p> <p>Predicate Blocks contain:</p> <ul> <li>The name of the Predicate, for example <code>holding</code>.</li> <li>The parameters of the Predicate. Parameters are objects to which the Predicate applies. For example, <code>holding(?x)</code> means that the predicate on-table is true for the object ?x.</li> <li>The effect of the Predicate. This is a logical statement concerning object properties which holds true when the predicate holds true. For example, <code>(equal (?x x y) (claw x y))</code> means that the object <code>?x</code> is at the object <code>claw</code>.</li> <li>(Optionally) A Priority:<ul> <li>Specifies a priority in which predicates are solved</li> <li>Example:</li> <li><code>:priority 0</code></li> <li>Higher priority predicates are applied first</li> <li>This is required to ensure a limited number of domains (eg Towers of Hanoi) can be solved. Typically it is required when multiple predicates affect the same variables.</li> </ul> </li> </ul>"},{"location":"ap_guide/#visual","title":"Visual","text":"<p>visual defines the objects represented on the screen.</p> <p>An example of a visual block is:</p> <pre><code>(:visual block\n              :type default\n              :properties(\n                (showname false)\n                (x NULL)\n                (y NULL)\n                (color (function randomcolor)) \n                (width 80)\n                (height 80)\n                (base64image iVBORw0KGg...oAA)\n              )\n  )\n</code></pre> <p>visual blocks contain:</p> <ul> <li>The name of the visual object, for example <code>block</code></li> <li>The type of the object. Types can either be <code>default</code>, <code>custom</code>, or <code>predefine</code>. </li> <li><code>default</code> objects apply to any objects mentioned in the problem file. A 'block' in the problem file is an example of a default object. </li> <li><code>custom</code> objects are additional to the problem file, and are created by the user for visual effect. The 'claw' is an example of a custom object - it mainly serves a visual purpose and is not specified in the problem or domain file. The robot in the Grid domain is another example of a custom object - it is not explicitly mentioned in the domain objects, but its behaviour is still fairly dynamic (moving around etc)</li> <li><code>predefine</code> These objects are assigned only to domain objects whose name matches any of the names in the :object field. This is used to apply properties to domain objects with specific naming conventions, for example, <code>key1</code>, <code>key2</code>, ... in the Grid domain. Alternatives, you can use <code>%key</code> shortcut to represent all the objects start with \"key\".</li> <li>Object properties. These properties govern the position and appearance of the object. See section 2.4 for a detailed list of object properties.</li> </ul>"},{"location":"ap_guide/#22-syntax","title":"2.2 Syntax","text":""},{"location":"ap_guide/#description","title":"Description","text":"<p>The syntax of the language is based on PDDL syntax, which is itself based on Lisp. See Section 2.2.2 for detailed resources on these languages.</p>"},{"location":"ap_guide/#resources","title":"Resources","text":"<ul> <li>PDDL information: https://en.wikipedia.org/wiki/Planning_Domain_Definition_Language</li> <li>PDDL examples, solver: http://planning.domains/</li> <li>Lisp information: https://en.wikipedia.org/wiki/Lisp_(programming_language)</li> <li>Lisp Tutorial: https://www.tutorialspoint.com/lisp/</li> </ul>"},{"location":"ap_guide/#23-types","title":"2.3 Types","text":"<p>A type is a class of variable to which a property can be assigned. The use of the word 'type' is therefore fairly loose.</p> <p>AP supports a number of 'types':</p> <ul> <li>Integer</li> <li>Boolean - <code>true</code> or <code>false</code></li> <li>Function - Allocates a property based on some function, for example, <code>distribute_horizontal</code></li> <li>Color - either a colour constant, eg <code>BLACK</code>, (see below), the <code>RANDOMCOLOR</code> function (see section 2.5), or an rgb value, for example <code>#FAA2B5</code></li> <li>Constant - A number of pre-defined constants exist. These should by convention be written in CAPITALS.</li> <li>Colours: BLACK, RED, BLUE, GREEN, YELLOW</li> <li>Integer Constants: PANEL_SIZE</li> <li><code>NULL</code> - A <code>NULL</code> value means the user is not specifying the property. <code>NULL</code> properties are typically be set by Predicate rules.</li> </ul> <p>A list of the types to which each property can be assigned is in section 2.4.</p>"},{"location":"ap_guide/#24-functions-and-object-properties","title":"2.4 Functions and Object Properties","text":"<p>Documentations on functions and object properties are presented at: https://planimation-staging-181bc.web.app/documentation</p>"},{"location":"ap_guide/#3-worked-example","title":"3 Worked Example","text":"<p>The following example is for the Blocks domain. To see the final result for this AP, see the link in section 1.2 for the associated domain and problem files. These can be visualised with this animation profile.</p> <p>The following is an example problem visualised with this animation profile:</p> <p></p> <p>The animation profile is as follows (comments  added with a # symbol):</p> <pre><code>(define (animation blocksworld)\n\n  # the 'on' predicate takes two parameters (objects) ?x and ?y\n  (:predicate on\n                 :parameters (?x ?y)\n                 :effect( \n\n\n        # the effect of the `on` predicate is that ?x's x value is equal to ?y's x value, and that ?x's y value is equal to ?y's ?y value plus its height.\n        # that is, object ?x is on top of object ?y\n                 (equal (?x x y) (?y x (sum y height)) \n                 )\n  )\n\n  (:predicate on-table\n\n                 :parameters (?x)\n                 :effect(\n\n\n        # the predicate on-table specifies that the object should be distributed horizontally, with a y value of 0\n        # and a margin of 5\n                 (equal (?x x y) (function distribute_horizontal (margin 5)(y 0))\n                 )\n\n  (:predicate holding\n\n                 :parameters (?x claw)\n                 :effect ( \n                 (equal (?x x y) (claw x y))\n                 )\n\n  )\n\n\n\n  # Below are the list of visual objects\n\n\n  (:visual block\n        ; block visual is the default visual type. All domain objects have this type by default\n        :type default\n\n\n        ; all 'visual' objects have the following properties\n              :properties(\n                (showname false)\n                (x false)\n                (y false)\n\n\n        ; randomcolor assigns a random color to the object\n                (color (function randomcolor))\n                (width 80)\n                (height 80)\n\n\n        ; this is a base64 string representing the image of the object\n                (base64image iVBORw0KGg...oAA)\n              )\n  )\n\n  (:visual claw\n        ; custom object types do not appear in the domain\n        ; they are mainly cosmetic. This object represents the claw (the claw does not move)\n              :type custom\n              :properties(\n                (showname false)\n                (x 230)\n                (y 500)\n                (color black)\n                (width 80)\n                (height 40)\n                (base64image iVBORw0KGg...oAA)\n               )\n  )\n  (:visual board\n              :type custom\n              :properties(\n                (showname false)\n                (x 0)\n                (y 0)\n                (color black)\n                (width panel_size)\n                (height 5)\n                (base64image iVBORw0KGg...oAA)\n              )\n  )\n\n)\n</code></pre> <p>Three other Animation Profiles are provided in the source code under Test/Sample Files. Each of these is commented for readability.</p>"},{"location":"ap_guide/#4-extending-the-language","title":"4 Extending the Language","text":""},{"location":"ap_guide/#41-extension-areas","title":"4.1 Extension Areas","text":"<p>There are two primary methods of extending the AP language: </p> <ol> <li> <p>Object properties (section 2.4)</p> <ul> <li>This is for simple ways of extending the appearance of objects, eg adding rotation or the font of 'showname'</li> </ul> </li> <li> <p>Adding functions (section 2.5)</p> <ul> <li>This is for more complex ways of describing object behaviours and interactions, eg adding new object layout options</li> </ul> </li> </ol>"},{"location":"ap_guide/#42-extension-steps","title":"4.2 Extension Steps","text":"<ol> <li>Modify the extensions.py file in the directory to add any functions or properties. See the document 'VFG Documentation.md' for more information.</li> <li>In limited advanced cases, exta functions may need to be written for Visualiser (Unity)</li> <li>Add the necessary documentation in this .md file.</li> </ol>"},{"location":"backend/","title":"Planimation Backend","text":"<p>Latest Development Build Status</p> <p></p>"},{"location":"backend/#local-dev","title":"Local Dev","text":"<ul> <li> <p>Required Python version 3.6</p> <p><code>cd backend/server pip install -r requirements.txt python manage.py runserver</code></p> </li> </ul>"},{"location":"backend/#docker-build","title":"Docker Build","text":"<ul> <li> <p>Install Docker</p> <p><code>export IMAGE_TAG=planimation-backend:latest docker build -t IMAGE_TAG -f /backend/docker/release/Dockerfile server docker run -d -p 8000:8000 IMAGE_TAG docker ps</code></p> </li> <li> <p>Test the web server is running by visiting <code>localhost:8000</code> in the browser.</p> </li> </ul>"},{"location":"backend/#contribution","title":"Contribution","text":"<p>When contributing to this repository, please adhere to the below guidelines.</p>"},{"location":"backend/#create-an-issue","title":"Create an issue","text":"<ul> <li>Before pushing code to the repo, it is required to create an issue along with a brief description so that peer developers can review, provide suggestions and feedback.</li> <li>Create a new issue to obtain <code>ISSUE_NO</code>.</li> </ul>"},{"location":"backend/#pre-push-changes","title":"Pre-push changes","text":"<p>Before pushing the code to repo please make sure to:</p> <ol> <li>Update the <code>README.md</code> with details of changes to the interface, this includes the new environment     variables, exposed ports, useful file locations and container parameters, if any.</li> <li>Increase the version numbers in any examples files and the README.md to the new version if any. </li> <li>The version number scheme, we follow SemVer.</li> </ol>"},{"location":"backend/#commit-message-format","title":"Commit message format","text":"<ul> <li>Set the commit template as follows:     <code>git config user.name \"Your Full Name\"     git config user.name \"Your GitHut email\"     git config commit.template .gitmessage</code></li> <li> <p>Commit message should be of the following format <code>[ISSUE_NO] COMMIT_MESSAGE</code>. Refer <code>.gitmessage</code>. Example:     ```     [10] Fix security issue related with form</p> <ul> <li>Updated lib dependency version</li> <li>Fixed something</li> <li>Fixed other thing</li> </ul> <p>Resolves #10 ```</p> </li> </ul>"},{"location":"backend/#pull-request-and-peer-code-review-process","title":"Pull Request and peer code review process","text":"<p>Please note that you cannot push directly to <code>develop</code> nor <code>master</code> branches.</p> <ul> <li>Create a new branch and push the changes to this branch.</li> <li>Create a PR and add at least one peer reviewer.</li> <li>You may merge your branch to <code>develop</code> once your PR is approved by your peer reviewer.</li> <li>If you do not have permission to merge the PR, please contact the reviewer to merge it for you.</li> </ul>"},{"location":"backend_dev_guide/","title":"Backend - Visualisation File Generator (VFG)","text":"<p>This document explains the functioning of the Visualisation File Generator (VFG) for the purposes of development. For deployment and the user guide, see README.md.</p> <p>The VFG decides where objects are on the screen and what they look like.</p> <p>Most domain-related modifications to the system should be made to the VFG. For example, a new domain might require objects to be laid out in a manner which is not captured in the existing Animation Profile language. Extending the Visualisation File Generator requires only building the project in Django (see section 2.2 of README.md). Modifications or extensions of the VFG need only be carried out only on the Django server (not Unity).</p>"},{"location":"backend_dev_guide/#1-getting-started","title":"1 Getting Started","text":"<p>To build the VFG, see (See Deployment)</p>"},{"location":"backend_dev_guide/#2-overview","title":"2 Overview","text":"<ul> <li> <p>Input files:</p> <ul> <li>Domain PDDL file</li> <li>Problem PDDL file</li> <li>Animation Profile</li> </ul> </li> <li> <p>Output file:</p> <ul> <li>Visualisation file</li> </ul> </li> </ul>"},{"location":"backend_dev_guide/#21-overall-architecture","title":"2.1 Overall Architecture:","text":""},{"location":"backend_dev_guide/#3-components","title":"3 Components","text":""},{"location":"backend_dev_guide/#31-parser","title":"3.1 Parser","text":"<p>Here is the code structure of parser. The Parser component gets domain PDDL file, problem PDDL file, animation PDDL file and plan PDDL file and parsers these files intopredicates list and animation profile json to feed Solver component.</p>"},{"location":"backend_dev_guide/#plan_generatorpy","title":"Plan_generator.py","text":"<p>Send domain file and problem file to planning.domain API and gets the solution file.</p> <pre><code>def get_plan(domain_file, problem_file):  \n</code></pre> <ul> <li>This function will send the domain and problem pddl file to the planning.domain  API to get the plan</li> </ul>"},{"location":"backend_dev_guide/#domain_parserpy","title":"Domain_parser.py","text":"<p>Transfer domain file into a list of predicates and record all possible predicates in this domain.</p> <pre><code>def get_domain_json(file_name): \n</code></pre> <ul> <li>This function transfers domain file to a list of predicates.</li> <li>Regular expression is used to get the result.</li> </ul> <p>Here is an example of the output:</p> <pre><code>{\n    \"on\": 2,\n    \"on-table\": 1,\n    \"clear\": 1,\n    \"arm-free\": 0,\n    \"holding\": 1\n}\n</code></pre>"},{"location":"backend_dev_guide/#problem_parserpy","title":"Problem_parser.py","text":"<p>Interprete problem file and get all predicates for INIT and GOAL stages</p> <pre><code>def get_object_list(predicates_lists,str_init):  \n</code></pre> <ul> <li>This function gets object list of the domain from predicate list</li> </ul> <pre><code>def get_regex_list(predicates_lists):  \n</code></pre> <ul> <li>This function changes the format of predicate list</li> </ul> <pre><code>def get_problem_json(file_name, predicates_lists):\n</code></pre> <ul> <li>This function parse the problem PDDL file and get the initial predicates and goal predicates.</li> </ul> <p>Here is an example of the output:</p> <pre><code>[{\n    \"init\": [{\n        \"name\": \"on\",\n        \"objectNames\": [\"c\", \"b\"]\n    }, {\n        \"name\": \"on-table\",\n        \"objectNames\": [\"a\"]\n    }, {\n        \"name\": \"on-table\",\n        \"objectNames\": [\"b\"]\n    }, {\n        \"name\": \"on-table\",\n        \"objectNames\": [\"d\"]\n    }, {\n        \"name\": \"clear\",\n        \"objectNames\": [\"a\"]\n    }, {\n        \"name\": \"clear\",\n        \"objectNames\": [\"c\"]\n    }, {\n        \"name\": \"clear\",\n        \"objectNames\": [\"d\"]\n    }, {\n        \"name\": \"arm-free\",\n        \"objectNames\": [\"No objects\"]\n    }]\n}, {\n    \"goal\": [{\n        \"name\": \"on\",\n        \"objectNames\": [\"a\", \"b\"]\n    }, {\n        \"name\": \"on\",\n        \"objectNames\": [\"b\", \"c\"]\n    }, {\n        \"name\": \"on\",\n        \"objectNames\": [\"c\", \"d\"]\n    }],\n    \"goal-condition\": [\"and\"]\n}]\n</code></pre>"},{"location":"backend_dev_guide/#predicates_generatorpy","title":"Predicates_generator.py","text":"<p>Interpret solution file and get all predicates for every stage in solution file.</p> <pre><code>def remove_unused_char(action_list):  \n</code></pre> <ul> <li>This function removes all the useless characters from solution file.</li> </ul> <pre><code>def get_action_name(current_step):  \n</code></pre> <ul> <li>This function returns the action name of the current step.</li> </ul> <pre><code>def get_stages(plan, problem_dic, problem_file, predicates_list):\n</code></pre> <ul> <li>This function gets the predicates for each stage.</li> </ul>"},{"location":"backend_dev_guide/#parser-output-predicate-list-of-all-stages","title":"Parser Output: Predicate List of all stages","text":""},{"location":"backend_dev_guide/#description","title":"Description","text":"<p>The predicate list is generated by Parser Component and feeds Solver Component. It includes all the predicates for each stage and the object list for the problem. Using the result of predicate list and animation profile, the solver can apply the one-way constraint solver to calculate the visualisation result. The object list can be used in the initialisation of the solver.</p>"},{"location":"backend_dev_guide/#format","title":"Format","text":"<p>The format for predicate list and object list is:</p> <pre><code>{\n\"stages\": [{ --stage list\n\"items\": [{ -- predicate list in each stage\n\"name\": , -- predicate rule\n\"objectNames\": -- objects to be referenced\n}],\n\"add\": , -- compared to previous stage, what predicates are added\n\"remove\": , -- compared to previous stage, what predicates are removed\n\"stageName\": , -- name of the stage\n\"stageInfo\": -- stage information\n} ],\n\"objects\": -- object list in the problem\n}\n</code></pre>"},{"location":"backend_dev_guide/#example","title":"Example","text":"<p>Here is an example of the predicate list for Blocks domain.</p> <pre><code>{\n\"stages\": [{\n\"items\": [{\n\"name\": \"on\",\n\"objectNames\": [\"c\", \"b\"]\n}, {\n\"name\": \"on-table\",\n\"objectNames\": [\"a\"]\n}, {\n\"name\": \"on-table\",\n\"objectNames\": [\"b\"]\n}, {\n\"name\": \"on-table\",\n\"objectNames\": [\"d\"]\n}, {\n\"name\": \"clear\",\n\"objectNames\": [\"a\"]\n}, {\n\"name\": \"clear\",\n\"objectNames\": [\"c\"]\n}, {\n\"name\": \"clear\",\n\"objectNames\": [\"d\"]\n}, {\n\"name\": \"arm-free\",\n\"objectNames\": [\"No objects\"]\n}],\n\"add\": \"\",\n\"remove\": \"\",\n\"stageName\": \"Initial Stage\",\n\"stageInfo\": \"No Step Information\"\n}, {\n\"items\": [{\n\"name\": \"on-table\",\n\"objectNames\": [\"a\"]\n}, {\n\"name\": \"on-table\",\n\"objectNames\": [\"b\"]\n}, {\n\"name\": \"on-table\",\n\"objectNames\": [\"d\"]\n}, {\n\"name\": \"clear\",\n\"objectNames\": [\"a\"]\n}, {\n\"name\": \"clear\",\n\"objectNames\": [\"d\"]\n}, {\n\"name\": \"clear\",\n\"objectNames\": [\"b\"]\n}, {\n\"name\": \"holding\",\n\"objectNames\": [\"c\"]\n}],\n\"add\": [{\n\"name\": \"clear\",\n\"objectNames\": [\"b\"]\n}, {\n\"name\": \"holding\",\n\"objectNames\": [\"c\"]\n}],\n\"remove\": [{\n\"name\": \"on\",\n\"objectNames\": [\"c\", \"b\"]\n}, {\n\"name\": \"clear\",\n\"objectNames\": [\"c\"]\n}, {\n\"name\": \"arm-free\",\n\"objectNames\": [\"No objects\"]\n}],\n\"stageName\": \"unstack (c b)\",\n\"stageInfo\": \"(:action unstack\\r\\n :parameters (c b)\\r\\n :precondition\\r\\n (and\\r\\n (on c b)\\r\\n (clear c)\\r\\n (arm-free)\\r\\n )\\r\\n :effect\\r\\n (and\\r\\n (holding c)\\r\\n (clear b)\\r\\n (not\\r\\n (clear c)\\r\\n )\\r\\n (not\\r\\n (arm-free)\\r\\n )\\r\\n (not\\r\\n (on c b)\\r\\n )\\r\\n )\\r\\n )\"\n}],\n\"objects\": [\"b\", \"d\", \"c\", \"a\"]\n}\n</code></pre>"},{"location":"backend_dev_guide/#32-solver","title":"3.2 Solver","text":""},{"location":"backend_dev_guide/#overview","title":"Overview","text":"<p>Here is the code structure of solver. This module will generate the visualisation file by using the predicates of all stages and animation profile.</p> <ul> <li>custom_function.py:<ul> <li>This module contain all the customer function we designed to help position the objects.</li> </ul> </li> <li>initialise.py:<ul> <li>This component is used to initialise the environment and objects for Predicate Solver.</li> </ul> </li> <li>random_color.py:<ul> <li>This function will provide a randomly selected colour for Initialise to use.</li> </ul> </li> <li>solver.py:<ul> <li>This module will compute the visualisation file by using the stages predicates and animation.</li> </ul> </li> </ul> <p>This module will generate the visualisation file by using the predicates of all stages and animation profile.</p> <p>Here is the algorithm diagram of our constraint solver:</p> <p></p> <p>Here is the link for this diagram: https://www.draw.io/#G12sCLukE55c_9VOKCJZqUiMh7OWFeaAXJ</p> <p>For instance, here are the predicates that need to be solved:</p> <pre><code>(On-table a)\n(On b a)\n(On c b)\n</code></pre> <p>In the predicates, the object ahead is the object to be solved and the object behind is the predefined object. To calculate the position of \"c\", we must know the position of \"b\". Similarly, to calculate the position of \"b\", we must know the position of \"a\". From (on-table a), we can know the position of a, so \"b\" is solved and then \"c\" is solved. The diagram below shows how the objects are referenced.</p> <p></p>"},{"location":"backend_dev_guide/#steps","title":"Steps","text":"<p>There are 5 main steps in the algorithm of constraint solver:</p>"},{"location":"backend_dev_guide/#create-an-object-table-initialisepy-random_colorpy","title":"Create an Object Table (initialise.py , random_color.py)","text":"<pre><code>def initialise_objects(object_list, animation_profile):  \n</code></pre> <p>This function will initialise objects in the animation profile and use a dictionary to store all the objects and their attributes.</p> <p>In the dictionary, it will store all objects and their attributes, as shown in the table below:</p> prefab name color height width y x showName a Block a \"a\": 1, \"r\": 0.41, \"b\": 0.41, \"g\": 0.55 40 80 false false true <p>Here is a simple example of object dict:</p> <pre><code>\"a\": {\n        \"prefab\": \"Block\", \n        \"name\": \"a\", \n        \"color\": {\n            \"a\": 1, \n            \"r\": 0.41, \n            \"b\": 0.41, \n            \"g\": 0.55\n        }, \n        \"height\": 40, \n        \"width\": 80, \n        \"y\": false, \n        \"x\": false, \n        \"showName\": true\n    }\n</code></pre>"},{"location":"backend_dev_guide/#separate-each-stage-customer_functionspy-solverpy","title":"Separate Each Stage (customer_functions.py, solver.py)","text":"<pre><code>def solve_all_stages(stages, objects_dic, predicates_rules, space):  \n</code></pre> <p>This function will seperate each stage in stages list and run through each stage which contains a list of predicates and solve all the predicates.</p> <p>The stages list is like:</p> <p>Stage1: Predicate1, Predicate2, Predicate3,.... Stage2: Predicate1, Predicate3, Predicate3,... ...</p> <p>Here is a simple example of one stage:</p> <pre><code>{\n    \"items\": [\n        {\n            \"objectNames\": [\n                \"c\"\n            ], \n            \"name\": \"on-table\"\n        }, \n        {\n            \"objectNames\": [\n                \"a\"\n            ], \n            \"name\": \"clear\"\n        }, \n        {\n            \"objectNames\": [\n                \"b\"\n            ], \n            \"name\": \"on-table\"\n        }, \n        {\n            \"objectNames\": [\n                \"c\", \n                \"a\"\n            ], \n            \"name\": \"on\"\n        }\n    ]\n}\n</code></pre>"},{"location":"backend_dev_guide/#create-predicate-query-customer_functionspy-solverpy","title":"Create Predicate Query (customer_functions.py, solver.py)","text":"<pre><code>def solvepredicates(predicates, objects_dic, predicates_rules, space):  \n</code></pre> <p>This function will store all predicates in a query and pop a predicate from predicates list, and try to solve it by calling check_rule_complete and applypredicates function. If it can be solved, then it will be removed from the query, if it can not be solved yet, it will be put back to the predicate list. The function will return true until all predicates are solved.</p> <p>The predicate lists will be separated like:</p> <pre><code>Predicate1, Predicate2, Predicate3,....\n</code></pre> <p>If predicate1 is solved then the predicate list will remove predicate1 and start to solve predicate 2:</p> <pre><code>Predicate2, Predicate3,....\n</code></pre> <p>If predicate 1 can't be solved, then it will be put back to the query:</p> <pre><code>Predicate2, Predicate3,....Predicate1\n</code></pre>"},{"location":"backend_dev_guide/#check-whether-predicate-can-be-solved-customer_functionspy-solverpy","title":"Check whether predicate can be solved (customer_functions.py, solver.py)","text":"<pre><code>def check_rule_complete(predicate, objects_dic, predicates_rules):  \n</code></pre> <p>This function will check whether this predicate can be solved. </p> <p>For example, here is a predicate for object a and c:</p> <pre><code> {\n            \"objectNames\": [\n                \"c\", \n                \"a\"\n            ], \n            \"name\": \"on\"\n        }\n</code></pre> <p>The predicate rule is \"on\" and the objects are \"a\" and \"c\". In this predicate, \"a\" is the referenced object, so to define the position of \"c\", we must know the position of \"a\". If a's value has not be defined, the function will return false because this predicate can't be solved for now.</p>"},{"location":"backend_dev_guide/#apply-animation-rule-customer_functionspy-solverpy","title":"Apply Animation Rule (customer_functions.py, solver.py)","text":"<pre><code>def applypredicates(predicate,objects_dic,predicates_rules,space):\n</code></pre> <p>This object will update the value of related object in the object list by applying the animation rule.  </p> <p>For example:</p> <pre><code>(on-table a)\n</code></pre> <p>Using distributex function in the extensions, a's y value is set to 0.</p> <pre><code>a.y = 0\n</code></pre>"},{"location":"backend_dev_guide/#33-adaptor","title":"3.3 Adaptor","text":"<p>Here is the code structure of adapter. This component transfers the result generated by Predicate Solver into the final visualisation file.</p> <pre><code>def transfer(one_stage, initialobjects, panel_size,shiftx,shifty, padding=20):\n</code></pre> <p>This function converts the dictionary into the info needed in visualisation file.</p> <pre><code>def get_panel_size(result, padding=20):\n</code></pre> <p>This function will for loop all the objects in the visualisaiton dictionary, and try to find the max_x and max_y of the panel.</p> <p>For example, </p> <pre><code>.........max_y\n.        .\n.        .\n.        .\n........max_x\n</code></pre> <pre><code>def generate_visualisation_file(result, object_list,animation_profile):  \n</code></pre> <pre><code>def get_visualisation_json(predicates, animation_profile):\n</code></pre> <p>These functions are the main functions of this module,they will call the other functions to manipulate the visualisation file for the unity visualiser.</p> <pre><code>\"shape\": {\n  \"Block\": {\n    \"prefab\": \"Block\",\n    \"showName\": true,\n    \"x\": false,\n    \"y\": false,\n    \"color\": \"randomcolor\",\n    \"width\": 80,\n    \"height\": 40\n },\n  \"Claw\": {\n    \"prefab\": \"Claw\",\n    \"color\": {\n      \"r\": 0,\n      \"g\": 0,\n      \"b\": 0,\n      \"a\": 1\n },\n    \"showName\": false,\n    \"x\": 230,\n    \"y\": 500,\n    \"width\": 80,\n    \"height\": 40\n },\n</code></pre>"},{"location":"backend_dev_guide/#visualisation-file-structure","title":"Visualisation File Structure","text":"<p>Visualisation Files are in JSON. </p> <p>They contain * a list of visual stages, containing     * a list of visual sprites.          * Each Visual sprite has a number of properties, outlined below     * Stages also contain a name and a list of predicates true at that stage * A table of images (base64) for visualisation * Subgoal map and pool, for displaying data about subgoals</p> <p>An example Visualisation file is shown below. It is for the Blocks domain, and it has only 2 stages.</p> <pre><code>{\n    \"visualStages\": [{\n        \"visualSprites\": [{\n            \"prefabImage\": \"Block\",\n            \"showName\": true,\n            \"x\": 100,\n            \"y\": 0,\n            \"color\": {\n                \"r\": 0.8,\n                \"g\": 0.52,\n                \"b\": 0.25,\n                \"a\": 1.0\n            },\n            \"width\": 80,\n            \"height\": 80,\n            \"name\": \"b\",\n            \"minX\": 0.207,\n            \"maxX\": 0.345,\n            \"minY\": 0.034,\n            \"maxY\": 0.172\n        }, {\n            \"prefabImage\": \"Block\",\n            \"showName\": true,\n            \"x\": 200,\n            \"y\": 0,\n            \"color\": {\n                \"r\": 0.5,\n                \"g\": 1.0,\n                \"b\": 0.83,\n                \"a\": 1.0\n            },\n            \"width\": 80,\n            \"height\": 80,\n            \"name\": \"d\",\n            \"minX\": 0.379,\n            \"maxX\": 0.517,\n            \"minY\": 0.034,\n            \"maxY\": 0.172\n        }, {\n            \"prefabImage\": \"Block\",\n            \"showName\": true,\n            \"x\": 100,\n            \"y\": 82,\n            \"color\": {\n                \"r\": 1.0,\n                \"g\": 0.76,\n                \"b\": 0.76,\n                \"a\": 1.0\n            },\n            \"width\": 80,\n            \"height\": 80,\n            \"name\": \"c\",\n            \"minX\": 0.207,\n            \"maxX\": 0.345,\n            \"minY\": 0.176,\n            \"maxY\": 0.314\n        }, {\n            \"prefabImage\": \"Block\",\n            \"showName\": true,\n            \"x\": 0,\n            \"y\": 0,\n            \"color\": {\n                \"r\": 1.0,\n                \"g\": 0.76,\n                \"b\": 0.76,\n                \"a\": 1.0\n            },\n            \"width\": 80,\n            \"height\": 80,\n            \"name\": \"a\",\n            \"minX\": 0.034,\n            \"maxX\": 0.172,\n            \"minY\": 0.034,\n            \"maxY\": 0.172\n        }, {\n            \"prefabImage\": \"Claw\",\n            \"color\": {\n                \"r\": 0,\n                \"g\": 0,\n                \"b\": 0,\n                \"a\": 1\n            },\n            \"showName\": false,\n            \"x\": 230,\n            \"y\": 500,\n            \"width\": 80,\n            \"height\": 40,\n            \"name\": \"Claw\",\n            \"minX\": 0.431,\n            \"maxX\": 0.569,\n            \"minY\": 0.897,\n            \"maxY\": 0.966\n        }, {\n            \"prefabImage\": \"Board\",\n            \"color\": {\n                \"r\": 0,\n                \"g\": 0,\n                \"b\": 0,\n                \"a\": 1\n            },\n            \"showName\": false,\n            \"x\": 0,\n            \"y\": 0,\n            \"width\": \"panel_size\",\n            \"height\": 5,\n            \"name\": \"Board\",\n            \"minX\": 0.034,\n            \"maxX\": 0.966,\n            \"minY\": 0.034,\n            \"maxY\": 0.043\n        }],\n        \"stageName\": \"Initial Stage\",\n        \"stageInfo\": \"No Step Information\"\n    }, {\n        \"visualSprites\": [{\n            \"prefabImage\": \"Block\",\n            \"showName\": true,\n            \"x\": 100,\n            \"y\": 0,\n            \"color\": {\n                \"r\": 0.8,\n                \"g\": 0.52,\n                \"b\": 0.25,\n                \"a\": 1.0\n            },\n            \"width\": 80,\n            \"height\": 80,\n            \"name\": \"b\",\n            \"minX\": 0.207,\n            \"maxX\": 0.345,\n            \"minY\": 0.034,\n            \"maxY\": 0.172\n        }, {\n            \"prefabImage\": \"Block\",\n            \"showName\": true,\n            \"x\": 200,\n            \"y\": 0,\n            \"color\": {\n                \"r\": 0.5,\n                \"g\": 1.0,\n                \"b\": 0.83,\n                \"a\": 1.0\n            },\n            \"width\": 80,\n            \"height\": 80,\n            \"name\": \"d\",\n            \"minX\": 0.379,\n            \"maxX\": 0.517,\n            \"minY\": 0.034,\n            \"maxY\": 0.172\n        }, {\n            \"prefabImage\": \"Block\",\n            \"showName\": true,\n            \"x\": 230,\n            \"y\": 440,\n            \"color\": {\n                \"r\": 1.0,\n                \"g\": 0.76,\n                \"b\": 0.76,\n                \"a\": 1.0\n            },\n            \"width\": 80,\n            \"height\": 80,\n            \"name\": \"c\",\n            \"minX\": 0.431,\n            \"maxX\": 0.569,\n            \"minY\": 0.793,\n            \"maxY\": 0.931\n        }, {\n            \"prefabImage\": \"Block\",\n            \"showName\": true,\n            \"x\": 0,\n            \"y\": 0,\n            \"color\": {\n                \"r\": 1.0,\n                \"g\": 0.76,\n                \"b\": 0.76,\n                \"a\": 1.0\n            },\n            \"width\": 80,\n            \"height\": 80,\n            \"name\": \"a\",\n            \"minX\": 0.034,\n            \"maxX\": 0.172,\n            \"minY\": 0.034,\n            \"maxY\": 0.172\n        }, {\n            \"prefabImage\": \"Claw\",\n            \"color\": {\n                \"r\": 0,\n                \"g\": 0,\n                \"b\": 0,\n                \"a\": 1\n            },\n            \"showName\": false,\n            \"x\": 230,\n            \"y\": 500,\n            \"width\": 80,\n            \"height\": 40,\n            \"name\": \"Claw\",\n            \"minX\": 0.431,\n            \"maxX\": 0.569,\n            \"minY\": 0.897,\n            \"maxY\": 0.966\n        }, {\n            \"prefabImage\": \"Board\",\n            \"color\": {\n                \"r\": 0,\n                \"g\": 0,\n                \"b\": 0,\n                \"a\": 1\n            },\n            \"showName\": false,\n            \"x\": 0,\n            \"y\": 0,\n            \"width\": \"panel_size\",\n            \"height\": 5,\n            \"name\": \"Board\",\n            \"minX\": 0.034,\n            \"maxX\": 0.966,\n            \"minY\": 0.034,\n            \"maxY\": 0.043\n        }],\n        \"stageName\": \"unstack  (c b)\",\n        \"stageInfo\": \"(:action unstack\\r\\n    :parameters (c b)\\r\\n    :precondition\\r\\n      (and\\r\\n        (on c b)\\r\\n        (clear c)\\r\\n        (arm-free)\\r\\n      )\\r\\n    :effect\\r\\n      (and\\r\\n        (holding c)\\r\\n        (clear b)\\r\\n        (not\\r\\n          (clear c)\\r\\n        )\\r\\n        (not\\r\\n          (arm-free)\\r\\n        )\\r\\n        (not\\r\\n          (on c b)\\r\\n        )\\r\\n      )\\r\\n  )\"\n    }],\n    \"subgoalPool\": {\n            \"m_keys\": [\"(on c d )\", \"(on b c )\", \"(on a b )\"],\n            \"m_values\": [\n                [\"c\", \"d\"],\n                [\"b\", \"c\"],\n                [\"a\", \"b\"]\n            ]\n    },\n    \"subgoalMap\": {\n            \"m_keys\": [2, 3, 4, 5, 6],\n            \"m_values\": [\n                [\"(on c d )\"],\n                [\"(on c d )\"],\n                [\"(on c d )\", \"(on b c )\"],\n                [\"(on c d )\", \"(on b c )\"],\n                [\"(on c d )\", \"(on b c )\", \"(on a b )\"]\n            ]\n    },\n    \"transferType\": 1,\n    \"imageTable\": {\n        \"m_keys\": [\"Block\", \"Board\", \"Claw\"],\n        \"m_values\": [\"iVB...QmCC\", \"iVBORw0...QmCC\", \"iVB...CYII=\"]\n    }\n}\n</code></pre>"},{"location":"backend_dev_guide_animation_downloader/","title":"Backend - Animation Downloader","text":"<p>This document explains the functioning of the animation generator for the purposes of development. For deployment and the user guide, see README.md.</p>"},{"location":"backend_dev_guide_animation_downloader/#components","title":"Components","text":""},{"location":"backend_dev_guide_animation_downloader/#mp4_exporterpy","title":"mp4_exporter.py","text":"<p>Defines a function to apply a color tint to an image.</p> <pre><code>def apply_tint(image, color):\n</code></pre> <p>Create_MP4 Function:</p> <pre><code>def create_MP4(vfg_file, startStep=_START_DEFAULT, stopStep=_END_DEFAULT):\n</code></pre> <ul> <li>This is the main function used to create the MP4 video.</li> <li>Reads visual stage data from the JSON file.</li> <li>Sets up the plotting area and axes.</li> <li>Decodes and stores image data.</li> <li>Defines the update function to refresh the animation for each frame.</li> <li>Creates the animation using matplotlib's FuncAnimation.</li> <li>Saves the animation as an MP4 format using FFMpegWriter.</li> <li>Saves the MP4 video to memory and returns it.</li> </ul>"},{"location":"backend_dev_guide_animation_downloader/#gif_exporterpy","title":"GIF_exporter.py","text":"<p>Create_GIF Function:</p> <pre><code>def create_GIF(vfg_file, startStep=_START_DEFAULT, stopStep=_END_DEFAULT):\n</code></pre> <ul> <li>This is the main function used to create the GIF animation.</li> <li>Reads visual stage data from the JSON file.</li> <li>Sets up the plotting area and axes.</li> <li>Decodes and stores image data.</li> <li>Defines the update function to refresh the animation for each frame.</li> <li>Creates the animation using matplotlib's FuncAnimation.</li> <li>Saves the animation as a GIF format using LoopingPillowWriter.</li> <li>Saves the GIF animation to memory and returns it.</li> </ul>"},{"location":"backend_dev_guide_animation_downloader/#media_exporterpy","title":"Media_exporter.py","text":"<p>Function export_media(vfg_file, format, parameters):</p> <pre><code>def export_media(vfg_file, format, parameters): \n</code></pre> <ul> <li>Check if parameters are provided, if not, throw an exception.</li> <li>Extract startStep and stopStep from the parameters, which define the range of visual stages to be exported. If these values are not provided in the parameters, default values of 0 and 999999 are used respectively.</li> <li>Ensure that startStep and stopStep are not negative.</li> <li>Depending on the specified format (format), call the corresponding exporter module function to create the media file: If the format is \"mp4\", call mp4_exporter.create_MP4. If the format is \"png\", call png_exporter.create_PNGs. If the format is \"gif\", call gif_exporter.create_GIF. If the format is \"webm\" or not any of the above, return \"error\".</li> </ul>"},{"location":"backend_dev_guide_animation_downloader/#png_exporterpy","title":"png_exporter.py","text":"<p>Function apply_tint(image, color):</p> <pre><code>def apply_tint(image, color):\n</code></pre> <ul> <li>Applies a color tint to an RGBA image. It multiplies the red, green, and blue channels by the corresponding color values and ensures the values are within the valid range (0-255).</li> </ul> <p>Function create_PNGs(vfg_file, startStep, stopStep):</p> <pre><code>def create_PNGs(vfg_file, startStep=_START_DEFAULT, stopStep=_END_DEFAULT):\n</code></pre> <ul> <li>Reads a JSON file (vfg_file) that contains the visual stages and sprites information.</li> <li>Determines the range of stages to process based on startStep and stopStep. Calculates the maximum dimensions needed for the images based on the sprites' positions and sizes.</li> <li>Initializes dictionaries for storing images and tinted images (caching). Image Loading: Loads and decodes images from base64 strings found in the JSON file's imageTable. Converts images to RGBA format and stores them in the image_table dictionary.</li> </ul>"},{"location":"backend_dev_guide_animation_downloader/#backend-parameters-protocol","title":"Backend - Parameters Protocol","text":"<p> Data sent from the frontend to the backend via POST Request will be formatted in three nested dictionaries:</p> <ol> <li>requestData a. This dictionary contains two keys: method and body. b. method has a default value which is 'POST'. c. body is the second level nested dictionary.</li> <li>body a. All data within this dictionary needs to be serialised using <code>JSON.stringify()</code>. b. This dictionary contains two keys: 'vfg', 'fileType' and 'parameters'. c. 'vfg' contains vfgText which is the complete data for all steps of specific animations. d. 'fileType' should have values of either 'mp4', 'png' or 'gif'. e. 'parameters' is the third level nested dictionary.</li> <li>parameters a. This dictionary contains three keys: 'startStep', 'stopStep' and 'speed' (and more can be added/amended if required). b. 'startStep' default value is 0. This value can be changed based on the user's input when downloading media. The backend will handle invalid values by auto-selected the closest possible value. c. 'stopStep' default value is 1. This value can be changed based on the user's input when downloading media. The backend will handle invalid values by auto-selected the closest possible value. d. 'speed' default value is 1. This value can be changed based on the user's input when downloading media. (this has not been implemented) e. A wrapper class for parameters has been implemented in src/frontend/src/pages/PageFour/index.js for a clearer structure of parameters type implemented based on different media type. Any irrelevant parameter for a specific file type can be removed from the switch statement.</li> </ol> <p>Example packing usage: </p>"},{"location":"contributors/","title":"Contributors","text":"<p>List of all the individuals who have contributed to build Planimation so far.</p> # Year Name Profile / Contact 1 2018 Sai Hou hshousai@gmail.com 2 2018 Yue Wu fangziyaoyao719@gmail.com 3 2018 Sunmuyu Zhang ellazhang1004@gmail.com 4 2018 Chong Hin Chau openh79q83@gmail.com 5 2018 Grace Johnson grace.johnson13@gmail.com 6 2018 Haoyuan Tang haoyuant94718@gmail.com 7 2018 - 2019 Yi Ding yidingcoder@gmail.com - linkedin/in/yiding-coder/ 8 2018 Gang Chen gche8512@gmail.com 9 2020 Jayan De Silva linkedin/in/jayandesilva 10 2020 Miley Li mileylihanbin@hotmail.com 11 2020 Qian Zhang nick.zhangq@gmail.com 12 2020 Naoki Yoshikawa nyoshikawa0914@gmail.com 13 2020 Chengwei Zhang tarajanzhang@gmail.com 14 2020 Jiazheng Yu jiazhengyu428@gmail.com 15 2020 Xuanhao Hu xuanhaoh129@gmail.com 16 2020 Zhichao Zhong franciszzc.au@gmail.com 17 2021 Bojing Zhou bojing.zh@gmail.com 18 2021 Felipe Ramos Morales framos.cnca@gmail.com 19 2021 Shiqi Zhang moomin2333@163.com 20 2021 Xiaoyu Zhang 15906360368@163.com 21 2021 Ziqi Meng mengzq1994@163.com 22 2023 Angel He angel.heyongxi.2004@gmail.com 23 2023 Tony He tony.yong.he@gmail.com 24 2023 Shu Tong Luo shutong.luo.03@gmail.com 25 2023 Angela Yuan angelay789.aa@gmail.com 26 2023 Yezihan Zhou alanzhou1314@gmail.com 27 2023 Li Ching Tan crossdisp@gmail.com 28 2023 Tim Bunnage tim10@bunnage.com.au 29 2023 Xiaoyinzheng Ji jacobji168@gmail.com 30 2023 Junqi Ning junqining443@gmail.com 31 2023 Wenxuan Zhang jyz1924@gmail.com"},{"location":"frontend/","title":"Planimation Frontend","text":"<p>Latest Development Build Status</p> <p></p>"},{"location":"frontend/#local-dev","title":"Local Dev","text":"<ul> <li> <p>Required Node 18+</p> </li> <li> <p>Open to package.json</p> <ul> <li> <p>For Window system, change the scripts content of package.json</p> <p><code>\"scripts\": {     \"start\": \"set NODE_OPTIONS=--openssl-legacy-provider&amp;&amp; node scripts/start.js\",     \"build\": \"set NODE_OPTIONS=--openssl-legacy-provider&amp;&amp; node scripts/build.js\",     \"test\": \"jest\"   }</code></p> </li> <li> <p>For Linux/ubuntu system, change the scripts content of package.json</p> <p><code>\"scripts\": {     \"start\": \"NODE_OPTIONS=--openssl-legacy-provider node scripts/start.js \",     \"build\": \"NODE_OPTIONS=--openssl-legacy-provider node scripts/build.js\",     \"test\": \"jest\"   }</code></p> </li> </ul> </li> </ul>"},{"location":"frontend/#docker-build","title":"Docker Build","text":"<ul> <li>Install Docker</li> <li>Make sure the scripts in package.json are correct with different system(See Local Dev Item 2).</li> <li> <p>Go to the frontend folder</p> <p><code>docker build -t planimation-frontend:latest -f ./Dockerfile ./ docker run -d -p 8080:8080 planimation-frontend:latest</code></p> </li> <li> <p>Test the web server is running by visiting <code>localhost:8080</code> in the browser.</p> </li> </ul>"},{"location":"frontend/#contribution","title":"Contribution","text":"<p>When contributing to this repository, please adhere to the below guidelines.</p>"},{"location":"frontend/#create-an-issue","title":"Create an issue","text":"<ul> <li>Before pushing code to the repo, it is required to create an issue along with a brief description so that peer developers can review, provide suggestions and feedback.</li> <li>Create a new issue to obtain <code>ISSUE_NO</code>.</li> </ul>"},{"location":"frontend/#pre-push-changes","title":"Pre-push changes","text":"<p>Before pushing the code to repo please make sure to:</p> <ol> <li>Update the <code>README.md</code> with details of changes to the interface, this includes the new environment     variables, exposed ports, useful file locations and container parameters, if any.</li> <li>Increase the version numbers in any examples files and the README.md to the new version if any. </li> <li>The version number scheme, we follow SemVer.</li> </ol>"},{"location":"frontend/#commit-message-format","title":"Commit message format","text":"<ul> <li>Set the commit template as follows:     <code>git config user.name \"Your Full Name\"     git config user.name \"Your GitHut email\"     git config commit.template .gitmessage</code></li> <li> <p>Commit message should be of the following format <code>[ISSUE_NO] COMMIT_MESSAGE</code>. Refer <code>.gitmessage</code>. Example:     ```     [10] Fix security issue related with form</p> <ul> <li>Updated lib dependency version</li> <li>Fixed something</li> <li>Fixed other thing</li> </ul> <p>Resolves #10 ```</p> </li> </ul>"},{"location":"frontend/#pull-request-and-peer-code-review-process","title":"Pull Request and peer code review process","text":"<p>Please note that you cannot push directly to <code>develop</code> nor <code>master</code> branches.</p> <ul> <li>Create a new branch and push the changes to this branch.</li> <li>Create a PR and add at least one peer reviewer.</li> <li>You may merge your branch to <code>develop</code> once your PR is approved by your peer reviewer.</li> <li>If you do not have permission to merge the PR, please contact the reviewer to merge it for you.</li> </ul>"},{"location":"frontend_dev_guide/","title":"Frontend - Javascript","text":""},{"location":"frontend_dev_guide/#1-getting-started","title":"1. Getting started","text":"<p>This section of the development guide provides an overview of how to get started with the Frontend-JS project, setting up the development environment, and running the application locally.</p>"},{"location":"frontend_dev_guide/#prerequisites","title":"Prerequisites","text":"<p>Before you start, ensure you have the following installed on your system:</p> <p>Node.js: A JavaScript runtime built on Chrome's V8 JavaScript engine. The project requires Node.js version 18.x or higher. You can download it from Node.js official website. npm: Node Package Manager, comes with Node.js, used for managing dependencies. Git: Version control system to clone the repository. Download from Git's official site.</p>"},{"location":"frontend_dev_guide/#clone-the-repo","title":"Clone the repo","text":"<p>First, clone the Frontend-JS repository from GitHub:  <code>git clone https://github.com/planimation/Frontend-JS.git  cd Frontend-JS</code></p>"},{"location":"frontend_dev_guide/#installing-dependencies","title":"Installing Dependencies","text":"<p>After cloning the repository, Change the scripts of package.json based on your system. the project's dependencies. </p> <ul> <li> <p>For Window system, change the scripts content of package.json</p> <pre><code>\"scripts\": {\n  \"start\": \"set NODE_OPTIONS=--openssl-legacy-provider&amp;&amp; node scripts/start.js\",\n  \"build\": \"set NODE_OPTIONS=--openssl-legacy-provider&amp;&amp; node scripts/build.js\",\n  \"test\": \"jest\"\n}\n</code></pre> </li> <li> <p>For Linux/ubuntu system, change the scripts content of package.json</p> <p><code>\"scripts\": {         \"start\": \"NODE_OPTIONS=--openssl-legacy-provider node scripts/start.js \",         \"build\": \"NODE_OPTIONS=--openssl-legacy-provider node scripts/build.js\",     \"test\": \"jest\"   }</code></p> </li> </ul> <p>Run the following command in the project directory to install dependencies:</p> <pre><code>npm install\n</code></pre>"},{"location":"frontend_dev_guide/#running-the-application-locally","title":"Running the Application locally","text":"<p>To start the development server and run the application locally, use:</p> <pre><code>npm start\n</code></pre> <p>This command will start a development server and open the application in your default web browser. The development server typically runs on http://localhost:3000.</p>"},{"location":"frontend_dev_guide/#2-architecture-overview","title":"2. Architecture Overview","text":""},{"location":"frontend_dev_guide/#directory-structure","title":"Directory Structure","text":"<pre><code>Frontend-JS/\n\u2502\n\u251c\u2500\u2500 src/                      # Source files for the application\n\u2502   \u251c\u2500\u2500 components/           # Reusable components\n\u2502   \u2502   \u251c\u2500\u2500 alertInFormat.jsx # Alert component for error messages\n\u2502   \u2502   \u2514\u2500\u2500 navigationBar/    # Navigation bar component\n\u2502   \u2502   \u2514\u2500\u2500 Template/    # Navigation bar component\n\u2502   \u251c\u2500\u2500 pages/                # Components representing entire pages\n\u2502   \u2502   \u251c\u2500\u2500 HomePage/         # \n\u2502   \u2502   \u251c\u2500\u2500 PageOne/          # Upload domain, problem, ap file to get animation of a plan.\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 dropAndFetch.jsx  # Manages file upload and backend communication\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 dropAndFetch.test.jsx      # The test file of dropAndFetch\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 dropZone.jsx      # Drop zone component for file input\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 dropZone.test.jsx      # the test file of dropZone\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 DragUpload.jsx      # New file uploader with lots of api.\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 DemoCards.jsx      # Shows all the animation demos by a card grid.\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 DemoCard.jsx      # A card component displays all the infomation of a animations.\n\u2502   \u2502   \u251c\u2500\u2500 PageTwo/          # Options to upload VFG directly\n\u2502   \u2502   \u251c\u2500\u2500 PageThree/        # User Manual\n\u2502   \u2502   \u251c\u2500\u2500 PageFour/         # Process VFG and display visualizaton\n\u2502   \u2502   \u2514\u2500\u2500 PageFive/         # Handle messages received from the plugin\n\u2502   \u2502   \u2514\u2500\u2500 Test/               \n\u2502   \u251c\u2500\u2500 plugin/\n\u2502   \u2514\u2500\u2500 Styles/\n\u2502   \u2514\u2500\u2500 tests/\n\u2502\n\u251c\u2500\u2500 public/                   # Static assets\n\u2502\n\u251c\u2500\u2500 scripts/                  # \n\u2502\n\u251c\u2500\u2500 config/                   # Project configuration files\n\u2502   \u2514\u2500\u2500 webpack.config.js     # Webpack configuration\n\u2502\n\u251c\u2500\u2500 cypress/                  # \n\u2502\n\u2514\u2500\u2500 package.json              # Project metadata and dependencies\n</code></pre>"},{"location":"frontend_dev_guide/#3-extensions","title":"3. Extensions","text":"<p>The animation samples gallery are connect to Github. Thus if you want to your animation profile can show your file correctly, you should follow following rules under Animation profiles</p>"},{"location":"plugins/","title":"Planimation Plugins","text":"<p>Here we list the plugins that integrate Planimation witt existing PDDL editors: https://github.com/planimation/plugins</p>"},{"location":"plugins/#editorplanningdomains","title":"editor.planning.domains","text":"<p>This folder contains the plugin for http://editor.planning.domains.</p> <p>Try the plugin with preloaded animation files for Blocskwold</p>"},{"location":"plugins/#functionality","title":"Functionality","text":"<ul> <li>Animate the PDDL Plan through planner API: http://editor.planning.domains/solve</li> <li>Animate the uploaded PDDL Plan</li> </ul>"},{"location":"plugins/#how-to-use-this-plugin","title":"How to use this plugin","text":"<ol> <li>Go to http://editor.planning.domains</li> <li>Click plugin on the top menu and add plugin url to upload it</li> <li>Click Planimation button after install the Planimation plugin</li> <li>Upload Domain, Problem, and Animation PDDL to animate the plan</li> </ol> <p>Any feedback, bug reports, comments, questions, or concerns can be sent to Nir Lipovetzky, or the issues tracker.</p>"},{"location":"ug1/","title":"Planning Visualisation - User Guide","text":""},{"location":"ug1/#1-overview","title":"1. Overview","text":"<p>This document contains the User Guide for Planning Visualiser.</p> <p>The Planning Visualiser is an open-source program which visualises solutions to Planning Problems. It is an executable Unity architecture in a browser.</p>"},{"location":"ug1/#11-planning-problems","title":"1.1 Planning Problems","text":"<p>For information about Planning Problems, see http://planning.domains/</p> <p>Our application uses one \u2018Animation Profile\u2019 per problem domain. An Animation Profile is a user-written PDDL file which tells the Visualiser how a Domain is to be visualised. See the developer docs for more information.</p>"},{"location":"ug1/#12-scope","title":"1.2 Scope","text":"<p>Planning Visualiser currently has Animation Profiles for four problem domains; Blocks, Grid, Towers of Hanoi, and Logistics. Other simple problem domains may be added by writing an Animation Profile (see section 3.2).</p> <p>Planning visualiser can generate a solution using the solver on http://planning.domains/ . Alternatively, the user can provide their own solution from any solver, provided it conforms to the correct format.</p>"},{"location":"ug1/#2-using-the-system","title":"2. Using the system","text":""},{"location":"ug1/#21-visualise-built-in-domains","title":"2.1 Visualise Built-in Domains","text":""},{"location":"ug1/#211-select-files","title":"2.1.1 Select Files","text":"<p>From the home screen, two options are available:</p> <p>Build visualisation from Problem</p> <ul> <li>Choose this option to generate a visualisation for a given problem</li> <li>Requires the following files: Domain PDDL, Problem PDDL, Animation     Profile PPDL. Files for existing domains are located in the     bitbucket repository under Test/Sample Files.</li> <li>A custom URL can be chosen to connect to any solver. The default is     solver.planning.domains</li> </ul> <p>Build visualisation from Solution VFG</p> <ul> <li>Choose this option to view the visualisation for an existing     Visalisation file</li> <li>Reuqires the following file: Visualisation File</li> <li>This allows the user to generate a visualisation file once, and     watch it multile times or share it with others</li> </ul> <p>Once the correct files are uplodaded, the user will be taken to the Visualiser screen.</p>"},{"location":"ug1/#212-visualise-solution","title":"2.1.2 Visualise Solution","text":"<p>The visualisation page has several parts.</p> <ol> <li>Steps Panel: Shows all the steps in the solution. Steps can be     clicked to navigate the animation to that step.</li> <li>Step Information Panel: shows detailed information for each     step, including actions.</li> <li>Animation Panel: displays the animation. Objects in the domain     are darkened when they are part of a satisfied subgoal.</li> <li>Control Panel: buttons to control the animation. These include     changing the speed of the animation, Play/Pause, Step     Forward/Backwards, Replay</li> <li>Subgoal panel: Shows all subgoals (predicates which comprise the     goal state). Subgoals change colour when they are satisfied.     Clicking on the subgoal opens a dropdown list to all of the steps in     which the subgoal is satisfied.</li> <li>Header Bar: Contains Home button, Help button, and a button to     download the Visualisation file. This downloaded visualisation file     can be shared with others or re-watched.</li> </ol>"},{"location":"ug1/#22-visualise-a-new-domain","title":"2.2 Visualise a new Domain","text":"<p>This can be done, for many simple domains, with no modification to the system.</p> <p>To add a new domain:</p> <ol> <li>Write or obtain a Domain PDDL file for the problem domain. Many     domains can be found at     https://bitbucket.org/planning-researchers/classical-domains/src/208a850d2ff2a27068329ad578ad99af9ec7e5c5/classical/?at=master</li> <li>Write an Animation Profile which corresponds to the domain file. For     documentation on the Animation Profile Language, see the file     \u2018Animation Profile Language\u2019</li> <li>Follow the steps in 2.1 to view a visualisation with the new     Animation Profile.</li> </ol>"},{"location":"ug1/#23-video-record-a-visualisation","title":"2.3 Video Record a Visualisation","text":"<p>A video recording of the visualisation can be created so that the final animation can be easily shared or re-reviewed independently of the system. The below recommendations are one way of recording the animation, however many other methods and tools exist to achieve this.</p>"},{"location":"ug1/#231-macos-users","title":"2.3.1 MacOS Users","text":"<p>To video record the visualisation, have the animation you wish to record on your screen, then complete the following steps:</p> <ol> <li>Launch the pre-installed QuickTime Player application</li> <li>Select \u201cFile\u201d and choose \u201cNew Screen Recording\u201d</li> <li>To decide whether mouse clicks and sounds appear in your recording     or not, click the small, white arrow and select the appropriate     options from the drop-down menu.</li> <li>When ready, click the red record button.</li> <li>You will need to select what you want to record. To record the     entire screen, click once anywhere. To record only a portion of it,     click and drag a box and then click \u201cStart Recording.\u201d</li> <li>When finished, navigate to the menu bar and click the stop recording     button designated by the square symbol.</li> <li>To save your recording, click \u201cFile\u201d and then\"Save\", and choose an     appropriate save location and name for the recording.</li> <li> <p>View and share file as you would with any other media file.</p> </li> <li> <p>Instructions adapted from     https://www.digitaltrends.com/computing/how-to-record-your-computer-screen/</p> </li> </ol>"},{"location":"ug1/#232-windows-users","title":"2.3.2 Windows Users","text":"<p>To video record the visualisation, have the animation you wish to record on your screen, then complete the following steps:</p> <ol> <li>Press the Windows key and the letter G at the same time to open the     Game Bar dialog (this will pop up on your screen).</li> <li>Check the \u201cYes, this is a game\u201d checkbox to load the Game Bar. This     is the procedure regardless of what you are recording.</li> <li>Click on the Start Recording button, or press Win + Alt + R to start     screen recording.</li> <li>Stop the recording by clicking on the red recording button on the     pop-up.</li> <li>The video can be accessed via your Videos folder, inside the     Captures folder.</li> </ol> <p>Instructions adapted from https://www.laptopmag.com/articles/how-to-video-screen-capture-windows-10</p>"},{"location":"ug1/#3-extending-the-system","title":"3. Extending the system","text":"<p>Planning Visualiser is modular and can be extended in multiple ways.</p> <p>Many simple domains can be captured in the existing Animation Profile language. For more complex domains, modifications may need to be made to the application.</p> <p>Detailed developer documentation is available at the project's repository (under /Docs) .</p>"}]}